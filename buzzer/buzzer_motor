
#include "driverlib/pin_map.h"
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_gpio.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"
#include "driverlib/pwm.h"

int temp_max,temp_min,temp;
bool start_motor=false;



void buzzer_check(){
    if (temp>=temp_max){
        PWMOutputState(PWM0_BASE, PWM_OUT_2_BIT, true);
    }
    else{
        PWMOutputState(PWM0_BASE, PWM_OUT_2_BIT, false);
    }
}


void motor_contro(){
    uint32_t vel;
    if(temp>temp_min){
        if(start_motor==false){
            PWMPulseWidthSet(PWM1_BASE, PWM_OUT_4,300);
            PWMOutputState(PWM1_BASE, PWM_OUT_4_BIT, true);//inicializacvao do motor para ultrapassar a velocidade minima
            //delay
            start_motor = true;
        }
        if(temp<temp_max){
            vel = (temp-temp_min)/(temp_max-temp_min)*320;
            if(vel>(320*0.2)){
                 PWMPulseWidthSet(PWM1_BASE, PWM_OUT_4,vel);
            }
            else {
                PWMPulseWidthSet(PWM1_BASE, PWM_OUT_4,320*0.2);
            }
        }
        if(temp>=temp_max){
            PWMPulseWidthSet(PWM1_BASE, PWM_OUT_4,320);
        }
    }
    else{
        PWMOutputState(PWM1_BASE, PWM_OUT_4_BIT, false);
        start_motor = false;
    }

}














int main(){
    //PB5 BUZZER
    //PB4 motor control



    SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC |   SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ); // inicializacao do clock


    SysCtlPWMClockSet(SYSCTL_PWMDIV_1); // sem pre scaler


    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);




    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);


    GPIOPinConfigure(GPIO_PB4_M0PWM2);
    GPIOPinConfigure(GPIO_PB5_M0PWM3);


    GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_4);
    GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_5);


    PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC);




    //Set the Period (expressed in clock ticks)
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, 10000);




    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_4,5000);
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5,5000);

    PWMGenEnable(PWM0_BASE, PWM_GEN_1);


    PWMOutputState(PWM0_BASE, PWM_OUT_2_BIT, true);
    PWMOutputState(PWM0_BASE, PWM_OUT_3_BIT, true);

    while(1){
        //buzzer_check();
        //motor_contro();
    }

    return 0;
}
