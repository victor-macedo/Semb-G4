#include <msp430G2553.h>
#include <stdio.h>
#include <stdint.h>


int read = 0;


#define READ_ADDRESS 0x03
#define WRITE_ADDRESS 0x02
#define trashbyte 0xAA
#define RESET 0xC0


#define INT_MCP 0x2B// registo do interrupts do MCP2115
#define INT_bits 0x03//enable int quando RX0 e RX1 ficam cheios

#define CONTROL 0x0F// controlo do modo de funcionamento
#define CONTROL_SET 0x7  // pre scaler de 8, modo normal

#define READ_buff0_1 0x90 //Read Buffer0SIDH
#define READ_buff0_2 0x92 //Read Buffer0SIDH






void setput_interrupt(){
    P2DIR &= ~BIT0;// como input P2.0
    P2IE  |=  BIT0;// interrupt em P2.0
    P2IES &= ~BIT0;//rising edge interrupt
    P2IFG &= ~BIT0;//LIMPA FLAG DE INTERRUPÇÃO DO PINO P2.0
}




void SPI_reset(){
    P1OUT &= (~BIT3); // Select Device
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = RESET; // Send 0xAA over SPI to Slave
    P1OUT |= (BIT3); // Unselect Device
    __delay_cycles(10000);


}

void MCP_set_up(){
    SPI_reset();
    write_SPI(INT_MCP,INT_bits);
    write_SPI(CONTROL,CONTROL_SET);
}







void SPI_setup(){
    P1OUT |= BIT3;//P1.3 como slave seleck
    P1DIR |= BIT3;
    P1SEL = BIT1 | BIT2 | BIT4;//P1.1 como SOMI P1.2 SIMO, P1.4 como clock
    P1SEL2 = BIT1 | BIT2 | BIT4;
    UCA0CTL1 |= BIT0;
    UCA0CTL0 |= UCCKPH + UCMSB + UCMST + UCSYNC; // 3-pin, 8-bit SPI master
    UCA0CTL1 |= UCSSEL_2; // SMCLK
    UCA0BR0 |= 0x02; // /2
    UCA0BR1 = 0; //
    UCA0MCTL = 0; // No modulation
    UCA0CTL1 &= ~BIT0; // **Initialize USCI state machine**
}


void write_SPI(uint8_t address , uint8_t data_write ){
    uint8_t  trash;
    P1OUT &= (~BIT3); // Select Device
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = WRITE_ADDRESS; // Send 0xAA over SPI to Slave
    while (!(IFG2 & UCA0RXIFG)); // USCI_A0 RX Received?
    trash = UCA0RXBUF; // Store received data
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = address; // Send 0xAA over SPI to Slave
    while (!(IFG2 & UCA0RXIFG)); // USCI_A0 RX Received?
    trash = UCA0RXBUF; // Store received data
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = data_write; // Send 0xAA over SPI to Slave
    while (!(IFG2 & UCA0RXIFG)); // USCI_A0 RX Received?
    trash = UCA0RXBUF; // Store received data
    P1OUT |= (BIT3); // Unselect Device
    __delay_cycles(1000);
}



uint8_t READ_SPI(uint8_t address ){
    uint8_t received_ch;
    uint8_t  trash;
    P1OUT &= (~BIT3); // Select Device
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = READ_ADDRESS; // Send 0xAA over SPI to Slave
    while (!(IFG2 & UCA0RXIFG)); // USCI_A0 RX Received?
    trash = UCA0RXBUF; // Store received data
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = address; // Send 0xAA over SPI to Slave
    while (!(IFG2 & UCA0RXIFG)); // USCI_A0 RX Received?
    trash = UCA0RXBUF; // Store received data
    while (!(IFG2 & UCA0TXIFG)); // USCI_A0 TX buffer ready?
    UCA0TXBUF = trashbyte; // Send 0xAA over SPI to Slave
    while (!(IFG2 & UCA0RXIFG)); // USCI_A0 RX Received?
    received_ch = UCA0RXBUF; // Store received data
    __delay_cycles(100);
    P1OUT |= (BIT3);
    __delay_cycles(1000);
    return received_ch;
}












int main(void){
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog tim
    setput_interrupt();
    __enable_interrupt(); //possibilita ints
    SPI_setup();
    uint8_t received;
    uint8_t received1;
    MCP_set_up();




    while(1){



        if(read==1){
            received = READ_SPI(READ_buff0_1 );
            received1 = READ_SPI(READ_buff0_2 );
            read = 0;
        }
    }
    return 0;
}



#pragma vector = PORT2_VECTOR
__interrupt void port_int(void){
    read = 1;
    P2IFG &= ~BIT0;//LIMPA FLAG DE INTERRUPÇÃO DO PINO P2.0
}
//funcional


